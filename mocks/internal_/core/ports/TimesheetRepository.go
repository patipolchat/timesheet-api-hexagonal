// Code generated by mockery v2.44.2. DO NOT EDIT.

package ports

import (
	context "context"

	entities "github.com/patipolchat/timesheet-api-hexagonal/internal/core/entities"
	mock "github.com/stretchr/testify/mock"

	types "github.com/patipolchat/timesheet-api-hexagonal/pkg/types"
)

// TimesheetRepository is an autogenerated mock type for the TimesheetRepository type
type TimesheetRepository struct {
	mock.Mock
}

type TimesheetRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *TimesheetRepository) EXPECT() *TimesheetRepository_Expecter {
	return &TimesheetRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, timesheet
func (_m *TimesheetRepository) Create(ctx context.Context, timesheet *entities.Timesheet) (*entities.Timesheet, error) {
	ret := _m.Called(ctx, timesheet)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entities.Timesheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Timesheet) (*entities.Timesheet, error)); ok {
		return rf(ctx, timesheet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Timesheet) *entities.Timesheet); ok {
		r0 = rf(ctx, timesheet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Timesheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Timesheet) error); ok {
		r1 = rf(ctx, timesheet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimesheetRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type TimesheetRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - timesheet *entities.Timesheet
func (_e *TimesheetRepository_Expecter) Create(ctx interface{}, timesheet interface{}) *TimesheetRepository_Create_Call {
	return &TimesheetRepository_Create_Call{Call: _e.mock.On("Create", ctx, timesheet)}
}

func (_c *TimesheetRepository_Create_Call) Run(run func(ctx context.Context, timesheet *entities.Timesheet)) *TimesheetRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Timesheet))
	})
	return _c
}

func (_c *TimesheetRepository_Create_Call) Return(_a0 *entities.Timesheet, _a1 error) *TimesheetRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimesheetRepository_Create_Call) RunAndReturn(run func(context.Context, *entities.Timesheet) (*entities.Timesheet, error)) *TimesheetRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByDate provides a mock function with given fields: ctx, date
func (_m *TimesheetRepository) DeleteByDate(ctx context.Context, date types.PureDate) error {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PureDate) error); ok {
		r0 = rf(ctx, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TimesheetRepository_DeleteByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByDate'
type TimesheetRepository_DeleteByDate_Call struct {
	*mock.Call
}

// DeleteByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - date types.PureDate
func (_e *TimesheetRepository_Expecter) DeleteByDate(ctx interface{}, date interface{}) *TimesheetRepository_DeleteByDate_Call {
	return &TimesheetRepository_DeleteByDate_Call{Call: _e.mock.On("DeleteByDate", ctx, date)}
}

func (_c *TimesheetRepository_DeleteByDate_Call) Run(run func(ctx context.Context, date types.PureDate)) *TimesheetRepository_DeleteByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PureDate))
	})
	return _c
}

func (_c *TimesheetRepository_DeleteByDate_Call) Return(_a0 error) *TimesheetRepository_DeleteByDate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TimesheetRepository_DeleteByDate_Call) RunAndReturn(run func(context.Context, types.PureDate) error) *TimesheetRepository_DeleteByDate_Call {
	_c.Call.Return(run)
	return _c
}

// FindByDate provides a mock function with given fields: ctx, date
func (_m *TimesheetRepository) FindByDate(ctx context.Context, date types.PureDate) (*entities.Timesheet, error) {
	ret := _m.Called(ctx, date)

	if len(ret) == 0 {
		panic("no return value specified for FindByDate")
	}

	var r0 *entities.Timesheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.PureDate) (*entities.Timesheet, error)); ok {
		return rf(ctx, date)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.PureDate) *entities.Timesheet); ok {
		r0 = rf(ctx, date)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Timesheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.PureDate) error); ok {
		r1 = rf(ctx, date)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimesheetRepository_FindByDate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByDate'
type TimesheetRepository_FindByDate_Call struct {
	*mock.Call
}

// FindByDate is a helper method to define mock.On call
//   - ctx context.Context
//   - date types.PureDate
func (_e *TimesheetRepository_Expecter) FindByDate(ctx interface{}, date interface{}) *TimesheetRepository_FindByDate_Call {
	return &TimesheetRepository_FindByDate_Call{Call: _e.mock.On("FindByDate", ctx, date)}
}

func (_c *TimesheetRepository_FindByDate_Call) Run(run func(ctx context.Context, date types.PureDate)) *TimesheetRepository_FindByDate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.PureDate))
	})
	return _c
}

func (_c *TimesheetRepository_FindByDate_Call) Return(_a0 *entities.Timesheet, _a1 error) *TimesheetRepository_FindByDate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimesheetRepository_FindByDate_Call) RunAndReturn(run func(context.Context, types.PureDate) (*entities.Timesheet, error)) *TimesheetRepository_FindByDate_Call {
	_c.Call.Return(run)
	return _c
}

// GetAll provides a mock function with given fields: ctx, limit, offset
func (_m *TimesheetRepository) GetAll(ctx context.Context, limit int, offset int) ([]*entities.Timesheet, error) {
	ret := _m.Called(ctx, limit, offset)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []*entities.Timesheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]*entities.Timesheet, error)); ok {
		return rf(ctx, limit, offset)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*entities.Timesheet); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Timesheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) error); ok {
		r1 = rf(ctx, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimesheetRepository_GetAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAll'
type TimesheetRepository_GetAll_Call struct {
	*mock.Call
}

// GetAll is a helper method to define mock.On call
//   - ctx context.Context
//   - limit int
//   - offset int
func (_e *TimesheetRepository_Expecter) GetAll(ctx interface{}, limit interface{}, offset interface{}) *TimesheetRepository_GetAll_Call {
	return &TimesheetRepository_GetAll_Call{Call: _e.mock.On("GetAll", ctx, limit, offset)}
}

func (_c *TimesheetRepository_GetAll_Call) Run(run func(ctx context.Context, limit int, offset int)) *TimesheetRepository_GetAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int), args[2].(int))
	})
	return _c
}

func (_c *TimesheetRepository_GetAll_Call) Return(_a0 []*entities.Timesheet, _a1 error) *TimesheetRepository_GetAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimesheetRepository_GetAll_Call) RunAndReturn(run func(context.Context, int, int) ([]*entities.Timesheet, error)) *TimesheetRepository_GetAll_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, timesheet
func (_m *TimesheetRepository) Update(ctx context.Context, timesheet *entities.Timesheet) (*entities.Timesheet, error) {
	ret := _m.Called(ctx, timesheet)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *entities.Timesheet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Timesheet) (*entities.Timesheet, error)); ok {
		return rf(ctx, timesheet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entities.Timesheet) *entities.Timesheet); ok {
		r0 = rf(ctx, timesheet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Timesheet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entities.Timesheet) error); ok {
		r1 = rf(ctx, timesheet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TimesheetRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type TimesheetRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - timesheet *entities.Timesheet
func (_e *TimesheetRepository_Expecter) Update(ctx interface{}, timesheet interface{}) *TimesheetRepository_Update_Call {
	return &TimesheetRepository_Update_Call{Call: _e.mock.On("Update", ctx, timesheet)}
}

func (_c *TimesheetRepository_Update_Call) Run(run func(ctx context.Context, timesheet *entities.Timesheet)) *TimesheetRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Timesheet))
	})
	return _c
}

func (_c *TimesheetRepository_Update_Call) Return(_a0 *entities.Timesheet, _a1 error) *TimesheetRepository_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TimesheetRepository_Update_Call) RunAndReturn(run func(context.Context, *entities.Timesheet) (*entities.Timesheet, error)) *TimesheetRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewTimesheetRepository creates a new instance of TimesheetRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTimesheetRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TimesheetRepository {
	mock := &TimesheetRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
